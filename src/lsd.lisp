(defpackage #:lsd
  (:use #:cl
        #:lsd.scene
        #:lsd.shooter)
  (:export #:main))
(in-package #:lsd)

(defstruct game
  (title "Lazy Sweet Dream")
  (version (asdf:component-version (asdf:find-system :lsd)))
  (width 800)
  (height 600)
  scene)

(defun main ()
  (sdl2:with-init (:everything)
    (let ((game (make-game))
          (shooter (make-shooter)))
      (setf (game-scene game) shooter)
      (sdl2:with-window (win :title (game-title game)
                             :w (game-width game)
                             :h (game-height game))
          (sdl2:with-renderer (renderer win :index -1 :flags '(:accelerated))
            (load-resources shooter renderer)
            (sdl2:with-event-loop (:method :poll)
              (:keydown (:keysym keysym)
               (when (sdl2:scancode= (sdl2:scancode-value keysym) :scancode-up)
                 (input (game-scene game) :u t))
               (when (sdl2:scancode= (sdl2:scancode-value keysym) :scancode-down)
                 (input (game-scene game) :d t))
               (when (sdl2:scancode= (sdl2:scancode-value keysym) :scancode-left)
                 (input (game-scene game) :l t))
               (when (sdl2:scancode= (sdl2:scancode-value keysym) :scancode-right)
                 (input (game-scene game) :r t))
               (when (sdl2:scancode= (sdl2:scancode-value keysym) :scancode-lshift)
                 (input (game-scene game) :s t))
               (when (sdl2:scancode= (sdl2:scancode-value keysym) :scancode-z)
                 (input (game-scene game) :z t))
               (when (sdl2:scancode= (sdl2:scancode-value keysym) :scancode-escape)
                 (sdl2:push-event :quit)))
              (:keyup (:keysym keysym)
               (when (sdl2:scancode= (sdl2:scancode-value keysym) :scancode-up)
                 (input (game-scene game) :u nil))
               (when (sdl2:scancode= (sdl2:scancode-value keysym) :scancode-down)
                 (input (game-scene game) :d nil))
               (when (sdl2:scancode= (sdl2:scancode-value keysym) :scancode-left)
                 (input (game-scene game) :l nil))
               (when (sdl2:scancode= (sdl2:scancode-value keysym) :scancode-right)
                 (input (game-scene game) :r nil))
               (when (sdl2:scancode= (sdl2:scancode-value keysym) :scancode-lshift)
                 (input (game-scene game) :s nil))
               (when (sdl2:scancode= (sdl2:scancode-value keysym) :scancode-z)
                 (input (game-scene game) :z nil)))
              (:idle ()
               (draw (game-scene game) renderer)
               (update (game-scene game))
               (sdl2:render-present renderer)
               (sdl2:delay (floor (/ 1000 60))))
              (:quit () t)))))))
